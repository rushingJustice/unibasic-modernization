/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import type { CreateFileRoute, FileRoutesByPath } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as DemoRouteImport } from './routes/demo'
import { Route as marketingRouteRouteImport } from './routes/(marketing)/route'
import { Route as marketingIndexRouteImport } from './routes/(marketing)/index'
import { Route as marketingDocsRouteImport } from './routes/(marketing)/docs'

// Create/Update Routes

const DemoRoute = DemoRouteImport.update({
  id: '/demo',
  path: '/demo',
  getParentRoute: () => rootRoute,
} as any)

const marketingRouteRoute = marketingRouteRouteImport.update({
  id: '/(marketing)',
  getParentRoute: () => rootRoute,
} as any)

const marketingIndexRoute = marketingIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => marketingRouteRoute,
} as any)

const marketingDocsRoute = marketingDocsRouteImport.update({
  id: '/docs',
  path: '/docs',
  getParentRoute: () => marketingRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/(marketing)': {
      id: '/(marketing)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof marketingRouteRouteImport
      parentRoute: typeof rootRoute
    }
    '/demo': {
      id: '/demo'
      path: '/demo'
      fullPath: '/demo'
      preLoaderRoute: typeof DemoRouteImport
      parentRoute: typeof rootRoute
    }
    '/(marketing)/docs': {
      id: '/(marketing)/docs'
      path: '/docs'
      fullPath: '/docs'
      preLoaderRoute: typeof marketingDocsRouteImport
      parentRoute: typeof marketingRouteRouteImport
    }
    '/(marketing)/': {
      id: '/(marketing)/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof marketingIndexRouteImport
      parentRoute: typeof marketingRouteRouteImport
    }
  }
}

// Add type-safety to the createFileRoute function across the route tree

declare module './routes/(marketing)/route' {
  const createFileRoute: CreateFileRoute<
    '/(marketing)',
    FileRoutesByPath['/(marketing)']['parentRoute'],
    FileRoutesByPath['/(marketing)']['id'],
    FileRoutesByPath['/(marketing)']['path'],
    FileRoutesByPath['/(marketing)']['fullPath']
  >
}
declare module './routes/demo' {
  const createFileRoute: CreateFileRoute<
    '/demo',
    FileRoutesByPath['/demo']['parentRoute'],
    FileRoutesByPath['/demo']['id'],
    FileRoutesByPath['/demo']['path'],
    FileRoutesByPath['/demo']['fullPath']
  >
}
declare module './routes/(marketing)/docs' {
  const createFileRoute: CreateFileRoute<
    '/(marketing)/docs',
    FileRoutesByPath['/(marketing)/docs']['parentRoute'],
    FileRoutesByPath['/(marketing)/docs']['id'],
    FileRoutesByPath['/(marketing)/docs']['path'],
    FileRoutesByPath['/(marketing)/docs']['fullPath']
  >
}
declare module './routes/(marketing)/index' {
  const createFileRoute: CreateFileRoute<
    '/(marketing)/',
    FileRoutesByPath['/(marketing)/']['parentRoute'],
    FileRoutesByPath['/(marketing)/']['id'],
    FileRoutesByPath['/(marketing)/']['path'],
    FileRoutesByPath['/(marketing)/']['fullPath']
  >
}

// Create and export the route tree

interface marketingRouteRouteChildren {
  marketingDocsRoute: typeof marketingDocsRoute
  marketingIndexRoute: typeof marketingIndexRoute
}

const marketingRouteRouteChildren: marketingRouteRouteChildren = {
  marketingDocsRoute: marketingDocsRoute,
  marketingIndexRoute: marketingIndexRoute,
}

const marketingRouteRouteWithChildren = marketingRouteRoute._addFileChildren(
  marketingRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof marketingIndexRoute
  '/demo': typeof DemoRoute
  '/docs': typeof marketingDocsRoute
}

export interface FileRoutesByTo {
  '/demo': typeof DemoRoute
  '/docs': typeof marketingDocsRoute
  '/': typeof marketingIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/(marketing)': typeof marketingRouteRouteWithChildren
  '/demo': typeof DemoRoute
  '/(marketing)/docs': typeof marketingDocsRoute
  '/(marketing)/': typeof marketingIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/demo' | '/docs'
  fileRoutesByTo: FileRoutesByTo
  to: '/demo' | '/docs' | '/'
  id:
    | '__root__'
    | '/(marketing)'
    | '/demo'
    | '/(marketing)/docs'
    | '/(marketing)/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  marketingRouteRoute: typeof marketingRouteRouteWithChildren
  DemoRoute: typeof DemoRoute
}

const rootRouteChildren: RootRouteChildren = {
  marketingRouteRoute: marketingRouteRouteWithChildren,
  DemoRoute: DemoRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/(marketing)",
        "/demo"
      ]
    },
    "/(marketing)": {
      "filePath": "(marketing)/route.tsx",
      "children": [
        "/(marketing)/docs",
        "/(marketing)/"
      ]
    },
    "/demo": {
      "filePath": "demo.tsx"
    },
    "/(marketing)/docs": {
      "filePath": "(marketing)/docs.tsx",
      "parent": "/(marketing)"
    },
    "/(marketing)/": {
      "filePath": "(marketing)/index.tsx",
      "parent": "/(marketing)"
    }
  }
}
ROUTE_MANIFEST_END */
